/*
 * Minimalist Blog
 *
 * This is a sample Blog server.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"database/sql"
	"log"
	"net/http"
)

func GetArticlesByAuthor(w http.ResponseWriter, r *http.Request) {
	db, err := sql.Open("mysql", "testuser:123@tcp(mysql:3306)/?charset=utf8")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	r.ParseForm()
	if len(r.Form["articleAuthor"]) <= 0 {
		if err != nil {
			reponse := ErrorResponse{"Invalid query"}
			JsonResponse(reponse, w, http.StatusBadRequest)
			return
		}
	}

	author := r.Form["articleAuthor"][0]
	query, err := db.Query("select * from test.Article where ArticleAuthor = '" + author + "'")
	if err != nil {
		log.Fatal(err)
	}
	defer query.Close()

	v, err := getJSON(query)
	if err != nil {
		log.Fatal(err)
	}

	if string(v) == "[]" {
		reponse := ErrorResponse{"Invalid query"}
		JsonResponse(reponse, w, http.StatusBadRequest)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetArticlesByName(w http.ResponseWriter, r *http.Request) {
	db, err := sql.Open("mysql", "testuser:123@tcp(mysql:3306)/?charset=utf8")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	r.ParseForm()
	if len(r.Form["articleName"]) <= 0 {
		if err != nil {
			reponse := ErrorResponse{"Invalid query"}
			JsonResponse(reponse, w, http.StatusBadRequest)
			return
		}
	}
	name := r.Form["articleName"][0]

	query, err := db.Query("select * from test.Article where ArticleName = '" + name + "'")
	if err != nil {
		log.Fatal(err)
	}
	defer query.Close()

	v, err := getJSON(query)
	if err != nil {
		log.Fatal(err)
	}

	if string(v) == "[]" {
		reponse := ErrorResponse{"Invalid query"}
		JsonResponse(reponse, w, http.StatusBadRequest)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetArticlesByTag(w http.ResponseWriter, r *http.Request) {
	db, err := sql.Open("mysql", "testuser:123@tcp(mysql:3306)/?charset=utf8")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	r.ParseForm()
	if len(r.Form["articleTag"]) <= 0 {
		if err != nil {
			reponse := ErrorResponse{"Invalid query"}
			JsonResponse(reponse, w, http.StatusBadRequest)
			return
		}
	}
	tag := r.Form["articleTag"][0]

	query, err := db.Query("select * from test.Article where ArticleTag = '" + tag + "'")
	if err != nil {
		log.Fatal(err)
	}
	defer query.Close()

	v, err := getJSON(query)
	if err != nil {
		log.Fatal(err)
	}

	if string(v) == "[]" {
		reponse := ErrorResponse{"Invalid query"}
		JsonResponse(reponse, w, http.StatusBadRequest)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
